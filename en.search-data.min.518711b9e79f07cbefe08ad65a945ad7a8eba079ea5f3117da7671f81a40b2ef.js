'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/sparql-cheatsheet/docs/select/','title':"SELECT",'section':"Docs",'content':"PREFIX #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?craigEmail WHERE { ab:craig ab:email ?craigEmail } LIMIT #  SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10 Multiple Constraints #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?first ?last WHERE { ?person ab:homeTel \u0026#34;(229) 276-5135\u0026#34; . ?person ab:firstName ?first . ?person ab:lastName ?last . } Using ; #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?first ?last WHERE { ?person ab:homeTel \u0026#34;(229) 276-5135\u0026#34; ; ab:firstName ?first ; ab:lastName ?last ; ab:email ?email . } OPTIONAL #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?first ?last ?workTel ?email WHERE { ?person ab:firstName ?first ; ab:lastName ?last . OPTIONAL { ?person ab:workTel ?workTel ; ab:email ?email . } } NOT EXISTS #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?first ?last WHERE { ?person ab:firstName ?first ; ab:lastName ?last . NOT EXISTS { ?person ab:workTel ?workNum . } } FILTER #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?first ?last WHERE { ?person ab:firstName ?first ; ab:lastName ?last . OPTIONAL { ?person ab:workTel ?workNum . } FILTER (!bound(?workNum)) } MINUS (Subtraction) #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?first ?last WHERE { ?person ab:firstName ?first ; ab:lastName ?last . MINUS { ?person ab:workTel ?workNum . } } DISTINCT #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT DISTINCT ?first ?last WHERE { ?s ab:takingCourse ?class ; ab:firstName ?first ; ab:lastName ?last .\t} UNION #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT * WHERE { { ?person ab:firstName ?first ; ab:lastName ?last .} UNION { ?course ab:courseTitle ?courseName .}\t} OFFSET #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT ?mealName WHERE { ?s e:description ?mealName . } OFFSET 2 LIMIT 10 ORDER BY #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT ?description ?date ?amount WHERE { ?meal e:description ?description ; e:date ?date ; e:amount ?amount . } ORDER BY DESC(?amount) MAX \u0026amp; MIN #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT (MAX(?amount) as ?maxAmount) WHERE { ?meal e:amount ?amount . } COUNT #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT (COUNT(?meal) as ?mealCount) WHERE { ?meal e:description ?description ; e:date ?date ; e:amount ?amount . } SUM #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT (SUM(?amount) as ?amountSum) WHERE { ?meal e:description ?description ; e:date ?date ; e:amount ?amount . } AVG #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT (AVG(?amount) as ?amountAvg) WHERE { ?meal e:description ?description ; e:date ?date ; e:amount ?amount . } GROUP BY \u0026amp;\u0026amp; HAVING #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT (SUM(?amount) as ?amountSum) WHERE { ?meal e:description ?description ; e:date ?date ; e:amount ?amount . } GROUP BY ?description HAVING (SUM(?amount) \u0026gt; 45) Subqueries #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?lastName ?courseName WHERE { { SELECT ?lastName WHERE { ?student ab:lastName ?lastName ; ab:takingCourse ?course . } } { SELECT ?courseName WHERE { ?course ab:courseTitle ?courseName . } } } Assigning Variables \u0026amp;\u0026amp; String functions #  PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT ?mealCode ?amount WHERE { { # USACE -\u0026gt; upper case ; SUBSTR -\u0026gt; substring indexing from 1 SELECT ?meal (UCASE(SUBSTR(?description, 1, 3)) as ?mealCode) WHERE { ?meal e:description ?description . } } { SELECT ?meal ?amount WHERE { ?meal e:amount ?amount . } } } PREFIX e: \u0026lt;http://learningsparql.com/ns/expenses#\u0026gt; SELECT ?mealCode ?amount WHERE { ?meal e:description ?description ; e:amount ?amount . BIND(UCASE(SUBSTR(?description, 1, 3)) as ?mealCode) } Querying remote datasets #  PREFIX ab: \u0026lt;http://learningsparql.com/ns/addressbook#\u0026gt; SELECT ?firstName ?lastName ?streetAddress ?city ?region ?postalCode FROM \u0026lt;http://learningsparql.com/2ndeditionexamples/ex041.ttl\u0026gt; WHERE { ?s ab:firstName ?firstName ; ab:lastName ?lastName ; ab:address ?address . ?address ab:postalCode ?postalCode ; ab:city ?city ; ab:streetAddress ?streetAddress ; ab:region ?region . } Federated Queries (Remote Endpoint) #  SELECT ?p ?o WHERE { SERVICE \u0026lt;http://DBpedia.org/sparql\u0026gt; { SELECT ?p ?o WHERE { \u0026lt;http://dbpedia.org/resource/Joseph_Hocking\u0026gt; ?p ?o . } } } LIMIT 10 GRAPH #  SELECT ?s ?p ?o ?g WHERE { GRAPH ?g { ?s ?p ?o . } } LIMIT 10 "});index.add({'id':1,'href':'/sparql-cheatsheet/docs/construct/','title':"CONSTRUCT",'section':"Docs",'content':"Creates a new RDF graph.\nCONSTRUCT { ?person vcard:fn ?fullName } WHERE { ?person vcard:given-name ?givenName . ?person vcard:family-name ?familyName . BIND(concat(?givenName, \u0026#34; \u0026#34;, ?familyName) as ?fullName) } "});index.add({'id':2,'href':'/sparql-cheatsheet/docs/insert/','title':"INSERT",'section':"Docs",'content':"Adds triples to a graph.\nINSERT DATA #  PREFIX ns: \u0026lt;https://example.org/ns#\u0026gt; INSERT DATA { GRAPH \u0026lt;https://example/bookStore\u0026gt; { \u0026lt;https://example/book1\u0026gt; ns:price 42 . } } INSERT #  PREFIX foaf: \u0026lt;http://xmlns.com/foaf/0.1\u0026gt; PREFIX eg: \u0026lt;http://example.org/ns#\u0026gt; INSERT { ?person eg:something eg:someone } WHERE { ?person ?property ?value ; foaf:givenName \u0026#34;Fred\u0026#34;@en . } "});index.add({'id':3,'href':'/sparql-cheatsheet/docs/delete/','title':"DELETE",'section':"Docs",'content':"DELETE DATA #  PREFIX ns: \u0026lt;https://example.org/ns#\u0026gt; DELETE DATA { GRAPH \u0026lt;https://example/bookStore\u0026gt; { \u0026lt;https://example/book1\u0026gt; dct:title \u0026#34;Fundamentals of Compiler Desing\u0026#34;@en . } } DELETE #  PREFIX foaf: \u0026lt;http://xmlns.com/foaf/0.1\u0026gt; DELETE { ?person ?property ?value } WHERE { ?person ?property ?value ; foaf:givenName \u0026#34;Fred\u0026#34;@en . } DELETE { GRAPH \u0026lt;g1\u0026gt; { a b c }} INSERT { GRAPH \u0026lt;g1\u0026gt; { x y z }} USING \u0026lt;g1\u0026gt; WHERE { ... } DELETE WHERE #  DELETE WHERE { ?person foaf:givenName \u0026#34;Fred\u0026#34;@en ; ?property ?value . } "});index.add({'id':4,'href':'/sparql-cheatsheet/docs/ask/','title':"ASK",'section':"Docs",'content':"Returns Yes or No depending on whether the query has a solution.\nPREFIX dbpedia: \u0026lt;http://dbpedia.org/resource/\u0026gt; PREFIX foaf: \u0026lt;http://xmlns.com/foaf/0.1/\u0026gt; PREFIX mo: \u0026lt;http://purl.org/ontology/mo/\u0026gt; ASK WHERE { dbpedia:The_Beatles mo:member dbpedia:Paul_McCartney } "});index.add({'id':5,'href':'/sparql-cheatsheet/docs/describe/','title':"DESCRIBE",'section':"Docs",'content':"Returns the RDF graph data about a resource.\nPREFIX foaf: \u0026lt;http://xmlns.com/foaf/0.1/\u0026gt; DESCRIBE ?ford WHERE { ?ford foaf:name \u0026#34;FORD MOTOR CO\u0026#34; . } "});index.add({'id':6,'href':'/sparql-cheatsheet/docs/graph-management/','title':"Graph Management",'section':"Docs",'content':"LOAD \u0026lt;file\u0026gt; INTO GRAPH \u0026lt;g1\u0026gt; CLEAR GRAPH \u0026lt;g1\u0026gt; CLEAR DEFAULT CLEAR ALL CLEAR NAMED CREATE GRAPH \u0026lt;g1\u0026gt; DROP GRAPH \u0026lt;g1\u0026gt; COPY GRAPH \u0026lt;g1\u0026gt; TO DEFAULT MOVE GRAPH \u0026lt;g1\u0026gt; TO DEFAULT ADD DEFAULT TO GRAPH \u0026lt;g1\u0026gt; # adds all triples from source graph to target graph "});})();